<%- include('partials/battleheader') %>
    <main class="container mx-auto p-4">
      <h2 class="text-center text-3xl mb-4">PokéBattler</h2>
      <div class="flex flex-col lg:flex-row justify-center">
        <div class="w-full lg:w-1/3">
          <div class="battle-container">
            <div class="pokedex-header text-center">
              <h5>#<%= pokemon1.id %> <%= pokemon1.name %></h5>
            </div>
            <div class="pokedex-body">
              <img
                src="<%= pokemon1.sprites.front_default %>"
                class="pokemon-img mx-auto"
                alt="<%= pokemon1.name %>"
              />
              <div class="health-bar-container">
                <p class="stat-title">
                  Levenspunten:
                  <span id="hp-value-1"></span>
                </p>
                <div class="health-bar">
                  <div
                    class="health-bar-fill"
                    id="health-bar-fill-1"
                    style="width: 100%"
                  ></div>
                </div>
              </div>
              <div class="battle-stats">
                <div class="stat">
                  <h5 class="stat-title">Aanval</h5>
                  <p class="stat-value"><%= pokemon1.stats[1].base_stat %></p>
                </div>
                <div class="stat">
                  <h5 class="stat-title">Verdediging</h5>
                  <p class="stat-value"><%= pokemon1.stats[2].base_stat %></p>
                </div>
              </div>
              <div class="abilities-container">
                <h5 class="stat-title">Krachten:</h5>
                <% pokemon1.abilities.forEach((ability, index) => { %>
                <button
                  class="pixel-button"
                  id="ability-<%= index %>"
                  onclick="applyAbilityDamage(1, 2, <%= pokemon1.stats[1].base_stat %>, <%= pokemon2.stats[2].base_stat %>, '<%= pokemon1.name %>', '<%= pokemon2.name %>', '<%= pokemon2.id %>')"
                >
                  <%= ability.ability.name %>
                </button>
                <% }); %>
              </div>
            </div>
          </div>
        </div>
        <div class="w-full lg:w-1/3">
          <div class="battle-container">
            <div class="pokedex-header text-center">
              <h5>#<%= pokemon2.id %> <%= pokemon2.name %></h5>
            </div>
            <div class="pokedex-body">
              <img
                src="<%= pokemon2.sprites.front_default %>"
                class="pokemon-img mx-auto"
                alt="<%= pokemon2.name %>"
              />
              <div class="health-bar-container">
                <p class="stat-title">
                  Levenspunten:
                  <span id="hp-value-2"></span>
                </p>
                <div class="health-bar">
                  <div
                    class="health-bar-fill"
                    id="health-bar-fill-2"
                    style="width: 100%"
                  ></div>
                </div>
              </div>
              <div class="battle-stats">
                <div class="stat">
                  <h5 class="stat-title">Aanval</h5>
                  <p class="stat-value"><%= pokemon2.stats[1].base_stat %></p>
                </div>
                <div class="stat">
                  <h5 class="stat-title">Verdediging</h5>
                  <p class="stat-value"><%= pokemon2.stats[2].base_stat %></p>
                </div>
              </div>
              <div class="abilities-container">
                <h5 class="stat-title">Krachten:</h5>
                <% pokemon2.abilities.forEach((ability, index) => { %>
                <button
                  class="pixel-button"
                  id="ability-enemy-<%= index %>"
                  disabled
                >
                  <%= ability.ability.name %>
                </button>
                <% }); %>
              </div>
            </div>
          </div>
        </div>
      </div>
      <button id="new-battle-button" class="new-battle-button">New Battle</button>
      <div id="battle-log"></div>
      <div class="container mx-auto py-8">
        <div class="tutorial-box">
          <h2 class="text-2xl font-semibold mb-4">Tutorial</h2>
          <p class="mb-2">
            Welkom bij de Pokémon Battle! Volg deze stappen om te beginnen:
          </p>
          <ol class="list-decimal list-inside mb-4">
            <li>
              Kies je Pokémon uit de lijst of zoek een specifieke Pokémon.
            </li>
            <li>Klik op de "Begin Gevecht" knop om de strijd te beginnen.</li>
            <li>
              Bekijk de statistieken en zie welke Pokémon als winnaar uit de bus
              komt!
            </li>
          </ol>
        </div>
      </div>
    </main>
    <script>
      const button = document.querySelector('[data-collapse-toggle="navbar-default"]');
      const navbarDefault = document.getElementById("navbar-default");
  
      button.addEventListener("click", function () {
        navbarDefault.classList.toggle("hidden");
      });
  
      // Function to update health bar and health text
      function updateHealthBar(pokemonIndex, currentHealth, totalHealth) {
        const healthBarFill = document.getElementById(`health-bar-fill-${pokemonIndex}`);
        const hpValue = document.getElementById(`hp-value-${pokemonIndex}`);
        const healthPercent = (currentHealth / totalHealth) * 100;
  
        healthBarFill.style.width = `${healthPercent}%`;
        hpValue.textContent = `${currentHealth}/${totalHealth}`;
      }
  
      // Function to log battle events
      function logBattleEvent(message) {
        const battleLog = document.getElementById('battle-log');
        const newLogEntry = document.createElement('p');
        newLogEntry.textContent = message;
        battleLog.appendChild(newLogEntry);
        battleLog.scrollTop = battleLog.scrollHeight; // Auto-scroll to the bottom
      }
  
      // Function to simulate damage and update health bars
      async function applyDamage(attackerIndex, defenderIndex, damage, attackerName, defenderName, defenderId) {
        const defenderCurrentHealth = parseInt(document.getElementById(`hp-value-${defenderIndex}`).textContent.split('/')[0]);
        const newDefenderHealth = Math.max(0, defenderCurrentHealth - damage); // Ensure health doesn't go below 0
  
        // Update defender's health bar
        updateHealthBar(defenderIndex, newDefenderHealth, parseInt(document.getElementById(`hp-value-${defenderIndex}`).textContent.split('/')[1]));
  
        // Log the damage dealt
        logBattleEvent(`${attackerName} attacks! ${defenderName} takes ${damage} damage!`);
  
        // Check if the defender's health is 0 or below
        if (newDefenderHealth <= 0) {
          // Declare the other Pokémon as the winner
          logBattleEvent(`${attackerName} wins!`);
          disableAbilityButtons();
          showNewBattleButton();
  
          // Attempt to catch the defeated Pokémon
          await catchPokemon(defenderId, defenderName);
          return true;
        }
        return false;
      }
  
      // Function to disable all ability buttons
      function disableAbilityButtons() {
        const abilityButtons = document.querySelectorAll('.pixel-button');
        abilityButtons.forEach(button => {
          button.disabled = true;
        });
      }
  
      // Function to show the New Battle button
      function showNewBattleButton() {
        const newBattleButton = document.getElementById('new-battle-button');
        newBattleButton.style.display = 'block';
      }
  
      // Function to start a new battle
      function startNewBattle() {
        // Implement logic to reset the battle or navigate to a new battle page
        location.reload(); // Simple way to reset the current battle
      }
  
      // Event listener for the New Battle button
      document.getElementById('new-battle-button').addEventListener('click', startNewBattle);
  
      // Function to apply ability damage
      function applyAbilityDamage(attackerIndex, defenderIndex, attackStat, defenseStat, attackerName, defenderName, defenderId) {
        // Check if the attacker can attack
        const attackerCurrentHealth = parseInt(document.getElementById(`hp-value-${attackerIndex}`).textContent.split('/')[0]);
        if (attackerCurrentHealth <= 0) {
          logBattleEvent(`${attackerName} cannot attack because it has no health left!`);
          return;
        }
  
        const damage = Math.max(1, (attackStat - (defenseStat / 2))); // Ensure at least 1 damage is dealt
        const defenderKnockedOut = applyDamage(attackerIndex, defenderIndex, damage, attackerName, defenderName, defenderId);
  
        if (defenderKnockedOut) {
          return;
        }
  
        // Check if the defender can still attack
        const defenderCurrentHealth = parseInt(document.getElementById(`hp-value-${defenderIndex}`).textContent.split('/')[0]);
        if (defenderCurrentHealth > 0) {
          const counterAttackStat = attackerIndex === 1 ? <%= pokemon2.stats[1].base_stat %> : <%= pokemon1.stats[1].base_stat %>;
          const counterDefenseStat = attackerIndex === 1 ? <%= pokemon1.stats[2].base_stat %> : <%= pokemon2.stats[2].base_stat %>;
          const counterDamage = Math.max(1, (counterAttackStat - (counterDefenseStat / 2))); // Ensure at least 1 damage is dealt
  
          // Check if the defender is still alive before counter-attack
          const newAttackerHealth = parseInt(document.getElementById(`hp-value-${attackerIndex}`).textContent.split('/')[0]);
          if (newAttackerHealth > 0 && !defenderKnockedOut) {
            applyDamage(defenderIndex, attackerIndex, counterDamage, defenderName, attackerName, attackerIndex === 1 ? <%= pokemon1.id %> : <%= pokemon2.id %>, attackerIndex === 1 ? <%= pokemon1.name %> : <%= pokemon2.name %>);
          }
        }
      }
  
      // Event listener for ability buttons
      const abilityButtons = document.querySelectorAll('.pixel-button');
      abilityButtons.forEach((button, index) => {
        button.addEventListener('click', () => {
          const attackerIndex = 1; // Pokémon 1 is attacking
          const defenderIndex = 2; // Pokémon 2 is defending
          const attackStat = <%= pokemon1.stats[1].base_stat %>;
          const defenseStat = <%= pokemon2.stats[2].base_stat %>;
  
          // Apply damage to the defending Pokémon
          applyAbilityDamage(attackerIndex, defenderIndex, attackStat, defenseStat, '<%= pokemon1.name %>', '<%= pokemon2.name %>', '<%= pokemon2.id %>');
        });
      });
  
      // Function to catch defeated Pokémon
      async function catchPokemon(pokemonId, pokemonName) {
        console.log("Attempting to catch Pokémon with ID:", pokemonId);
        try {
          const response = await fetch('/catcher/catch-pokemon', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ pokemonId }),
          });
  
          const result = await response.json();
          console.log("Catch result:", result);
  
          if (result.success) {
            logBattleEvent(`You have caught ${pokemonName}!`);
          } else {
            logBattleEvent(`Failed to catch ${pokemonName}: ${result.message}`);
          }
        } catch (error) {
          logBattleEvent(`Error catching ${pokemonName}: ${error.message}`);
        }
      }
  
      // Initialize health bars
      const pokemon1HP = <%= pokemon1.stats[0].base_stat %>;
      const pokemon2HP = <%= pokemon2.stats[0].base_stat %>;
      updateHealthBar(1, pokemon1HP, pokemon1HP); // Use Pokémon 1's total health
      updateHealthBar(2, pokemon2HP, pokemon2HP); // Use Pokémon 2's total health
    </script>
  </body>
  </html>