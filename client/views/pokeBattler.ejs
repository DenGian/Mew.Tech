<%- include('partials/battleheader') %>
<body>
  <main class="container mx-auto p-4">
    <h2 class="text-center text-3xl mb-4">PokéBattler</h2>
    <div class="flex flex-col lg:flex-row justify-center">
      <div class="w-full lg:w-1/3">
        <div class="battle-container">
          <div class="pokedex-header text-center">
            <h5>#<%= pokemon1.id %> <%= pokemon1.name %></h5>
          </div>
          <div class="pokedex-body">
            <img
              src="<%= pokemon1.sprites.front_default %>"
              class="pokemon-img mx-auto"
              alt="<%= pokemon1.name %>"
            />
            <div class="health-bar-container">
              <p class="stat-title">
                Levenspunten:
                <span id="hp-value-1"></span>
              </p>
              <div class="health-bar">
                <div
                  class="health-bar-fill"
                  id="health-bar-fill-1"
                  style="width: 100%"
                ></div>
              </div>
            </div>
            <div class="battle-stats">
              <div class="stat">
                <h5 class="stat-title">Aanval</h5>
                <p class="stat-value"><%= pokemon1.stats[1].base_stat %></p>
              </div>
              <div class="stat">
                <h5 class="stat-title">Verdediging</h5>
                <p class="stat-value"><%= pokemon1.stats[2].base_stat %></p>
              </div>
            </div>
            <div class="abilities-container">
              <h5 class="stat-title">Krachten:</h5>
              <% pokemon1.abilities.forEach((ability, index) => { %>
              <button
                class="pixel-button ability-button"
                id="ability-<%= index %>"
                data-attack="<%= pokemon1.stats[1].base_stat %>"
                data-defense="<%= pokemon2.stats[2].base_stat %>"
                data-attacker-name="<%= pokemon1.name %>"
                data-defender-name="<%= pokemon2.name %>"
                data-defender-id="<%= pokemon2.id %>"
                data-attacker-id="<%= pokemon1.id %>"
              >
                <%= ability.ability.name %>
              </button>
              <% }); %>
            </div>
          </div>
        </div>
      </div>
      <div class="w-full lg:w-1/3">
        <div class="battle-container">
          <div class="pokedex-header text-center">
            <h5>#<%= pokemon2.id %> <%= pokemon2.name %></h5>
          </div>
          <div class="pokedex-body">
            <img
              src="<%= pokemon2.sprites.front_default %>"
              class="pokemon-img mx-auto"
              alt="<%= pokemon2.name %>"
            />
            <div class="health-bar-container">
              <p class="stat-title">
                Levenspunten:
                <span id="hp-value-2"></span>
              </p>
              <div class="health-bar">
                <div
                  class="health-bar-fill"
                  id="health-bar-fill-2"
                  style="width: 100%"
                ></div>
              </div>
            </div>
            <div class="battle-stats">
              <div class="stat">
                <h5 class="stat-title">Aanval</h5>
                <p class="stat-value"><%= pokemon2.stats[1].base_stat %></p>
              </div>
              <div class="stat">
                <h5 class="stat-title">Verdediging</h5>
                <p class="stat-value"><%= pokemon2.stats[2].base_stat %></p>
              </div>
            </div>
            <div class="abilities-container">
              <h5 class="stat-title">Krachten:</h5>
              <% pokemon2.abilities.forEach((ability, index) => { %>
              <button
                class="pixel-button"
                id="ability-enemy-<%= index %>"
                disabled
              >
                <%= ability.ability.name %>
              </button>
              <% }); %>
            </div>
          </div>
        </div>
      </div>
    </div>
    <button id="new-battle-button" class="new-battle-button">New Battle</button>
    <div id="battle-log"></div>
    <div class="container mx-auto py-8">
      <div class="tutorial-box">
        <h2 class="text-2xl font-semibold mb-4">Tutorial</h2>
        <p class="mb-2">
          Welkom bij PokéBattler! Volg deze stappen om aan de slag te gaan:
        </p>
        <ol class="list-decimal list-inside mb-4">
          <li>Kies je Pokémon uit de lijst of zoek een specifieke Pokémon.</li>
          <li>Klik op een van de aanvallen om de strijd te beginnen.</li>
          <li>
            Bekijk de statistieken en zie welke Pokémon als winnaar uit de bus komt!
          </li>
          <li>
            Als je Pokémon wint, heb je een kans om de vijandige Pokémon te vangen.
          </li>
          <li>
            Als je Pokémon verliest, moet je opnieuw beginnen met een nieuwe Pokémon.
          </li>
        </ol>
        <p class="mb-2">
          Veel succes en moge de beste trainer winnen!
        </p>
      </div>
    </div>
  </main>
  <script>
    // Selecteer de knop die het navbarmenu laat zien of verbergen
    const button = document.querySelector('[data-collapse-toggle="navbar-default"]');
    // Selecteer het element met id "navbar-default"
    const navbarDefault = document.getElementById("navbar-default");

    // Voeg een klikgebeurtenis toe aan de knop
    button.addEventListener("click", function () {
      // Wissel de klasse "hidden" voor het navbarmenu om het te verbergen of te laten zien
      navbarDefault.classList.toggle("hidden");
    });

    // Functie om de gezondheidsbalk en gezondheidswaarde bij te werken
    function updateHealthBar(pokemonIndex, currentHealth, totalHealth) {
      const healthBarFill = document.getElementById(`health-bar-fill-${pokemonIndex}`);
      const hpValue = document.getElementById(`hp-value-${pokemonIndex}`);
      const healthPercent = (currentHealth / totalHealth) * 100;

      healthBarFill.style.width = `${healthPercent}%`;
      hpValue.textContent = `${currentHealth}/${totalHealth}`;
    }

    // Functie om gevechtsevenementen te loggen
    function logBattleEvent(message) {
      const battleLog = document.getElementById('battle-log');
      const newLogEntry = document.createElement('p');
      newLogEntry.textContent = message;
      battleLog.appendChild(newLogEntry);
      battleLog.scrollTop = battleLog.scrollHeight; // Automatisch scrollen naar beneden
    }

    // Functie om schade toe te brengen en gezondheidsbalken bij te werken
    async function applyDamage(attackerIndex, defenderIndex, damage, attackerName, defenderName, defenderId) {
      const defenderCurrentHealth = parseInt(document.getElementById(`hp-value-${defenderIndex}`).textContent.split('/')[0]);
      const newDefenderHealth = Math.max(0, defenderCurrentHealth - damage); // Zorg ervoor dat gezondheid niet onder 0 gaat

      // Update de gezondheidsbalk van de verdediger
      updateHealthBar(defenderIndex, newDefenderHealth, parseInt(document.getElementById(`hp-value-${defenderIndex}`).textContent.split('/')[1]));

      // Log de schade die is toegebracht
      logBattleEvent(`${attackerName} valt aan! ${defenderName} neemt ${damage} schade!`);

      // Controleer of de gezondheid van de verdediger 0 of lager is
      if (newDefenderHealth <= 0) {
        // Verklaar de andere Pokémon als winnaar
        logBattleEvent(`${attackerName} heeft gewonnen!`);
        disableAbilityButtons();
        showNewBattleButton();

        // Probeer de verslagen Pokémon te vangen als de speler heeft gewonnen
        if (attackerIndex === 1) {
          await catchPokemon(defenderId, defenderName);
        } else {
          logBattleEvent(`De ${attackerName} is weggelopen!`);
        }
        return true;
      }
      return false;
    }

    // Functie om alle vaardigheidsknoppen uit te schakelen
    function disableAbilityButtons() {
      const abilityButtons = document.querySelectorAll('.pixel-button.ability-button');
      abilityButtons.forEach(button => {
        button.disabled = true;
      });
    }

    // Functie om de Nieuwe Gevecht-knop weer te geven
    function showNewBattleButton() {
      const newBattleButton = document.getElementById('new-battle-button');
      newBattleButton.style.display = 'block';
    }

    // Functie om een nieuw gevecht te starten
    function startNewBattle() {
      // Implementeer logica om het gevecht te resetten of naar een nieuwe gevechtspagina te navigeren
      location.reload(); // Eenvoudige manier om het huidige gevecht te resetten
    }

    // Event listener voor de Nieuwe Gevecht-knop
    document.getElementById('new-battle-button').addEventListener('click', startNewBattle);

    // Functie om vaardigheidsschade toe te passen
    async function applyAbilityDamage(attackerIndex, defenderIndex, attackStat, defenseStat, attackerName, defenderName, attackerId, defenderId) {
      // Controleer of de aanvaller kan aanvallen
      const attackerCurrentHealth = parseInt(document.getElementById(`hp-value-${attackerIndex}`).textContent.split('/')[0]);
      if (attackerCurrentHealth <= 0) {
        logBattleEvent(`${attackerName} kan niet aanvallen omdat het geen gezondheid meer heeft!`);
        return;
      }

      const damage = Math.max(1, (attackStat - (defenseStat / 2))); // Zorg ervoor dat er minstens 1 schade wordt toegebracht
      const defenderKnockedOut = await applyDamage(attackerIndex, defenderIndex, damage, attackerName, defenderName, defenderId);

      if (defenderKnockedOut) {
        return;
      }

      // Controleer of de verdediger nog kan aanvallen
      const defenderCurrentHealth = parseInt(document.getElementById(`hp-value-${defenderIndex}`).textContent.split('/')[0]);
      if (defenderCurrentHealth > 0) {
        const counterAttackStat = attackerIndex === 1 ? <%= pokemon2.stats[1].base_stat %> : <%= pokemon1.stats[1].base_stat %>;
        const counterDefenseStat = attackerIndex === 1 ? <%= pokemon1.stats[2].base_stat %> : <%= pokemon2.stats[2].base_stat %>;
        const counterDamage = Math.max(1, (counterAttackStat - (counterDefenseStat / 2))); // Zorg ervoor dat er minstens 1 schade wordt toegebracht

        // Controleer of de verdediger nog leeft voor de tegenaanval
        const newAttackerHealth = parseInt(document.getElementById(`hp-value-${attackerIndex}`).textContent.split('/')[0]);
        if (newAttackerHealth > 0) {
          await applyDamage(defenderIndex, attackerIndex, counterDamage, defenderName, attackerName, attackerId);
        }
      }
    }

    // Event listener voor vaardigheidsknoppen
    const abilityButtons = document.querySelectorAll('.pixel-button.ability-button');
    abilityButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const attackStat = parseInt(button.getAttribute('data-attack'));
        const defenseStat = parseInt(button.getAttribute('data-defense'));
        const attackerName = button.getAttribute('data-attacker-name');
        const defenderName = button.getAttribute('data-defender-name');
        const attackerId = button.getAttribute('data-attacker-id');
        const defenderId = button.getAttribute('data-defender-id');

        // Breng schade toe aan de verdedigende Pokémon
        applyAbilityDamage(1, 2, attackStat, defenseStat, attackerName, defenderName, attackerId, defenderId);
      });
    });

    // Functie om een verslagen Pokémon te vangen
    async function catchPokemon(pokemonId, pokemonName) {
      console.log("Proberen Pokémon te vangen met ID:", pokemonId);
      try {
        const response = await fetch('/catcher/catch-pokemon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ pokemonId }),
        });

        const result = await response.json();
        console.log("Vangstresultaat:", result);

        if (result.success) {
          logBattleEvent(`Je hebt ${pokemonName} gevangen!`);
        } else {
          logBattleEvent(`Het vangen van ${pokemonName} is mislukt: ${result.message}`);
        }
      } catch (error) {
        logBattleEvent(`Fout bij het vangen van ${pokemonName}: ${error.message}`);
      }
    }

    // Initialiseer gezondheidsbalken
    const pokemon1HP = <%= pokemon1.stats[0].base_stat %>;
    const pokemon2HP = <%= pokemon2.stats[0].base_stat %>;
    updateHealthBar(1, pokemon1HP, pokemon1HP); // Gebruik de totale gezondheid van Pokémon 1
    updateHealthBar(2, pokemon2HP, pokemon2HP); // Gebruik de totale gezondheid van Pokémon 2
</script>

</body>
</html>
